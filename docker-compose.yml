version: "3" # docker version

volumes:
  postgres-data-volume:
    driver: local
# Первый вариант volume
# Том postgres-data-volume создается на том же хосте Docker, что и контейнер.
# Может быть использован в нескольких службах


# RUN – запустить команду при сборке контейнера
# CMD - запустить команду после сборки контейнера в нём
services:

  # TODO сервис nginx на локальном порту 22000, смапить nginx-data/upstreams.conf в /etc/nginx/conf.d/upstreams.conf
  nginx: # name
    container_name: nginx.service # name
    build: # настройка директории для сервиса
      context: nginx # путь к каталогу, где содержится Dockerfile
    ports: # проброс портов
      - 22000:80
    volumes: # сопрягаем каталоги на локальной машине и в докер контейнере
      - ./nginx-data/upstreams.conf:/etc/nginx/conf.d/upstreams.conf
    links:
      - backend1
      - backend2

  postgres:
    container_name: postgres.service
    build:
      context: postgres
    environment:  # настройки переменных для контейнера
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: example
    ports:
      - 22001:5432
# Второй вариант volume
# проброс директории
    volumes:
      - postgres-data-volume:/var/lib/postgresql/data

  frontend:
    container_name: frontend.service
    build:
      context: frontend
    ports:
      - 22002:3000
    volumes:
      - ./frontend/:/app/

  backend1:
    container_name: backend1.service
    build:
      context: backend
    ports:
      - 22003:7000
# Третий вариант volume
# проброс файла хоста
    volumes:
      - ./backend1-data/application.properties:/app/application.properties

  # TODO сервис backend2 на локальном порту 22004, внешний конфиг взять из backend2-data
  backend2:
    container_name: backend2.service
    build:
      context: backend
    ports:
      - 22004:7000
    volumes:
      - ./backend2-data/application.properties:/app/application.properties